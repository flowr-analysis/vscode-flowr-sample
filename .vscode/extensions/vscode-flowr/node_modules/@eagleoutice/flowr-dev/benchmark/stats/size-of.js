"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSizeOfDfGraph = getSizeOfDfGraph;
const environment_1 = require("../../dataflow/environments/environment");
const vertex_1 = require("../../dataflow/graph/vertex");
const object_sizeof_1 = __importDefault(require("object-sizeof"));
const objects_1 = require("../../util/objects");
/* we have to kill all processors linked in the default environment as they cannot be serialized and they are shared anyway */
function killBuiltInEnv(env) {
    if (env === undefined) {
        return undefined;
    }
    else if (env.id === environment_1.BuiltInEnvironment.id) {
        /* in this case, the reference would be shared for sure */
        return {
            id: env.id,
            parent: killBuiltInEnv(env.parent),
            memory: new Map()
        };
    }
    const memory = new Map();
    for (const [k, v] of env.memory) {
        memory.set(k, v.filter(v => v.type !== 128 /* ReferenceType.BuiltInFunction */ && v.type !== 64 /* ReferenceType.BuiltInConstant */ && !('processor' in v)));
    }
    return {
        id: env.id,
        parent: killBuiltInEnv(env.parent),
        memory
    };
}
/** Returns the size of the given df graph in bytes (without sharing in-memory) */
function getSizeOfDfGraph(df) {
    const verts = [];
    for (const [, v] of df.vertices(true)) {
        let vertex = v;
        if (vertex.environment) {
            vertex = {
                ...vertex,
                environment: {
                    ...vertex.environment,
                    current: killBuiltInEnv(v.environment?.current)
                }
            };
        }
        if (vertex.tag === vertex_1.VertexType.FunctionDefinition) {
            vertex = {
                ...vertex,
                subflow: {
                    ...vertex.subflow,
                    environment: {
                        ...vertex.subflow.environment,
                        current: killBuiltInEnv(vertex.subflow.environment.current)
                    }
                }
            };
        }
        vertex = (0, objects_1.compactRecord)({
            ...vertex,
            /* shared anyway by using constants */
            tag: undefined
        });
        verts.push(vertex);
    }
    return (0, object_sizeof_1.default)([...verts, ...df.edges()]);
}
//# sourceMappingURL=size-of.js.map