"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultConfigOptions = void 0;
exports.setConfigFile = setConfigFile;
exports.parseConfig = parseConfig;
exports.setConfig = setConfig;
exports.getConfig = getConfig;
const objects_1 = require("./util/objects");
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const log_1 = require("./util/log");
const files_1 = require("./util/files");
const joi_1 = __importDefault(require("joi"));
exports.defaultConfigOptions = {
    ignoreSourceCalls: false,
    rPath: undefined,
    semantics: {
        environment: {
            overwriteBuiltIns: {
                loadDefaults: true,
                definitions: []
            }
        }
    }
};
const schema = joi_1.default.object({
    ignoreSourceCalls: joi_1.default.boolean().optional(),
    rPath: joi_1.default.string().optional(),
    semantics: joi_1.default.object({
        environment: joi_1.default.object({
            overwriteBuiltIns: joi_1.default.object({
                loadDefaults: joi_1.default.boolean().optional(),
                definitions: joi_1.default.array().items(joi_1.default.object()).optional()
            }).optional()
        }).optional()
    })
});
// we don't load from a config file at all by default unless setConfigFile is called
let configFile = undefined;
let configWorkingDirectory = process.cwd();
let currentConfig;
function setConfigFile(file, workingDirectory = process.cwd(), forceLoad = false) {
    configFile = file;
    configWorkingDirectory = workingDirectory;
    // reset the config so it gets reloaded
    currentConfig = undefined;
    if (forceLoad) {
        getConfig();
    }
}
function parseConfig(jsonString) {
    try {
        const parsed = JSON.parse(jsonString);
        const validate = schema.validate(parsed);
        if (!validate.error) {
            // assign default values to all config options except for the specified ones
            return (0, objects_1.deepMergeObject)(exports.defaultConfigOptions, parsed);
        }
        else {
            log_1.log.error(`Failed to validate config ${jsonString}: ${validate.error.message}`);
            return undefined;
        }
    }
    catch (e) {
        log_1.log.error(`Failed to parse config ${jsonString}: ${e.message}`);
    }
}
function setConfig(config) {
    currentConfig = config;
}
function getConfig() {
    // lazy-load the config based on the current settings
    if (currentConfig === undefined) {
        setConfig(loadConfigFromFile(configFile, configWorkingDirectory));
    }
    return currentConfig;
}
function loadConfigFromFile(configFile, workingDirectory) {
    if (configFile !== undefined) {
        let searchPath = path_1.default.resolve(workingDirectory);
        do {
            const configPath = path_1.default.join(searchPath, configFile);
            if (fs_1.default.existsSync(configPath)) {
                log_1.log.trace(`Found config at ${configPath}`);
                const ret = parseConfig(fs_1.default.readFileSync(configPath, { encoding: 'utf-8' }));
                if (ret) {
                    log_1.log.info(`Using config ${JSON.stringify(ret)}`);
                    return ret;
                }
            }
            // move up to parent directory
            searchPath = (0, files_1.getParentDirectory)(searchPath);
        } while (fs_1.default.existsSync(searchPath));
    }
    log_1.log.info(`Using default config ${JSON.stringify(exports.defaultConfigOptions)}`);
    return exports.defaultConfigOptions;
}
//# sourceMappingURL=config.js.map