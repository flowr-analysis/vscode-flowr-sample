"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueriesSchema = exports.AnyQuerySchema = exports.VirtualQuerySchema = exports.CompoundQuerySchema = exports.SupportedQueriesSchema = exports.CallContextQuerySchema = void 0;
const joi_1 = __importDefault(require("joi"));
const call_context_query_format_1 = require("./call-context-query/call-context-query-format");
exports.CallContextQuerySchema = joi_1.default.object({
    type: joi_1.default.string().valid('call-context').required().description('The type of the query.'),
    callName: joi_1.default.string().required().description('Regex regarding the function name!'),
    kind: joi_1.default.string().optional().description('The kind of the call, this can be used to group calls together (e.g., linking `plot` to `visualize`). Defaults to `.`'),
    subkind: joi_1.default.string().optional().description('The subkind of the call, this can be used to uniquely identify the respective call type when grouping the output (e.g., the normalized name, linking `ggplot` to `plot`). Defaults to `.`'),
    callTargets: joi_1.default.string().valid(...Object.values(call_context_query_format_1.CallTargets)).optional().description('Call targets the function may have. This defaults to `any`. Request this specifically to gain all call targets we can resolve.'),
    linkTo: joi_1.default.object({
        type: joi_1.default.string().valid('link-to-last-call').required().description('The type of the linkTo sub-query.'),
        callName: joi_1.default.string().required().description('Regex regarding the function name of the last call. Similar to `callName`, strings are interpreted as a regular expression.')
    }).optional().description('Links the current call to the last call of the given kind. This way, you can link a call like `points` to the latest graphics plot etc.')
}).description('Call context query used to find calls in the dataflow graph');
exports.SupportedQueriesSchema = joi_1.default.alternatives(exports.CallContextQuerySchema).description('Supported queries');
exports.CompoundQuerySchema = joi_1.default.object({
    type: joi_1.default.string().valid('compound').required().description('The type of the query.'),
    query: joi_1.default.string().required().description('The query to run on the file analysis information.'),
    commonArguments: joi_1.default.object().required().description('Common arguments for all queries.'),
    arguments: joi_1.default.array().items(exports.SupportedQueriesSchema).required().description('Arguments for each query.')
}).description('Compound query used to combine queries of the same type');
exports.VirtualQuerySchema = joi_1.default.alternatives(exports.CompoundQuerySchema).description('Virtual queries (used for structure)');
exports.AnyQuerySchema = joi_1.default.alternatives(exports.SupportedQueriesSchema, exports.VirtualQuerySchema).description('Any query');
exports.QueriesSchema = joi_1.default.array().items(exports.AnyQuerySchema);
//# sourceMappingURL=query-schema.js.map