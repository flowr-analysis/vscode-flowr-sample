"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SupportedQueries = void 0;
exports.executeQueriesOfSameType = executeQueriesOfSameType;
exports.executeQueries = executeQueries;
const call_context_query_executor_1 = require("./call-context-query/call-context-query-executor");
const assert_1 = require("../util/assert");
const virtual_queries_1 = require("./virtual-query/virtual-queries");
exports.SupportedQueries = {
    'call-context': call_context_query_executor_1.executeCallContextQueries
};
function executeQueriesOfSameType(data, ...queries) {
    (0, assert_1.guard)(queries.length > 0, 'At least one query must be provided');
    /* every query must have the same type */
    (0, assert_1.guard)(queries.every(q => q.type === queries[0].type), 'All queries must have the same type');
    const executor = exports.SupportedQueries[queries[0].type];
    (0, assert_1.guard)(executor !== undefined, `Unsupported query type: ${queries[0].type}`);
    return executor(data, queries);
}
function isVirtualQuery(query) {
    return virtual_queries_1.SupportedVirtualQueries[query.type] !== undefined;
}
function groupQueriesByType(queries) {
    const grouped = {};
    function addQuery(query) {
        if (grouped[query.type] === undefined) {
            grouped[query.type] = [];
        }
        grouped[query.type].push(query);
    }
    for (const query of queries) {
        if (isVirtualQuery(query)) {
            const executor = virtual_queries_1.SupportedVirtualQueries[query.type];
            const subQueries = executor(query);
            for (const subQuery of subQueries) {
                addQuery(subQuery);
            }
        }
        else {
            addQuery(query);
        }
    }
    return grouped;
}
function executeQueries(data, queries) {
    const now = Date.now();
    const grouped = groupQueriesByType(queries);
    const results = {};
    for (const type of Object.keys(grouped)) {
        results[type] = executeQueriesOfSameType(data, ...grouped[type]);
    }
    results['.meta'] = {
        timing: Date.now() - now
    };
    return results;
}
//# sourceMappingURL=query.js.map