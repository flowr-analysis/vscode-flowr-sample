"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tryNormalizeIfThen = tryNormalizeIfThen;
const input_format_1 = require("../../input-format");
const parser_1 = require("../../../json/parser");
const normalize_meta_1 = require("../../normalize-meta");
const normalize_single_node_1 = require("../structure/normalize-single-node");
/**
 * Try to parse the construct as a {@link RIfThenElse}.
 */
function tryNormalizeIfThen(data, tokens) {
    parser_1.parseLog.trace('trying to parse if-then structure');
    if (tokens[0].name !== "IF" /* RawRType.If */) {
        parser_1.parseLog.debug('encountered non-if token for supposed if-then structure');
        return undefined;
    }
    else if (tokens[1].name !== "(" /* RawRType.ParenLeft */) {
        throw new input_format_1.XmlParseError(`expected left-parenthesis for if but found ${JSON.stringify(tokens[1])}`);
    }
    else if (tokens[3].name !== ")" /* RawRType.ParenRight */) {
        throw new input_format_1.XmlParseError(`expected right-parenthesis for if but found ${JSON.stringify(tokens[3])}`);
    }
    const parsedCondition = (0, normalize_single_node_1.normalizeSingleNode)(data, tokens[2]);
    const parsedThen = (0, normalize_single_node_1.normalizeSingleNode)(data, tokens[4]);
    if (parsedCondition.type === "RDelimiter" /* RType.Delimiter */ || parsedThen.type === "RDelimiter" /* RType.Delimiter */) {
        throw new input_format_1.XmlParseError(`unexpected missing parts of if, received ${JSON.stringify([parsedCondition, parsedThen])} for ${JSON.stringify(tokens)}`);
    }
    const { location, content } = (0, normalize_meta_1.retrieveMetaStructure)(tokens[0].content);
    return {
        type: "RIfThenElse" /* RType.IfThenElse */,
        condition: parsedCondition,
        then: (0, normalize_meta_1.ensureExpressionList)(parsedThen),
        location,
        lexeme: content,
        info: {
            fullRange: data.currentRange,
            additionalTokens: [],
            fullLexeme: data.currentLexeme
        }
    };
}
//# sourceMappingURL=normalize-if-then.js.map