"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tryNormalizeIfThenElse = tryNormalizeIfThenElse;
const parser_1 = require("../../../json/parser");
const normalize_if_then_1 = require("./normalize-if-then");
const assert_1 = require("../../../../../../../util/assert");
const normalize_meta_1 = require("../../normalize-meta");
const normalize_single_node_1 = require("../structure/normalize-single-node");
/**
 * Try to parse the construct as a {@link RIfThenElse}.
 */
function tryNormalizeIfThenElse(data, tokens) {
    // we start by parsing a regular if-then structure
    parser_1.parseLog.trace('trying to parse if-then-else structure');
    const parsedIfThen = (0, normalize_if_then_1.tryNormalizeIfThen)(data, [tokens[0], tokens[1], tokens[2], tokens[3], tokens[4]]);
    if (parsedIfThen === undefined) {
        return undefined;
    }
    parser_1.parseLog.trace('if-then part successful, now parsing else part');
    (0, assert_1.guard)(tokens[5].name === "ELSE" /* RawRType.Else */, () => `expected else token for if-then-else but found ${JSON.stringify(tokens[5])}`);
    const parsedElse = (0, normalize_single_node_1.normalizeSingleNode)(data, tokens[6]);
    (0, assert_1.guard)(parsedElse.type !== "RDelimiter" /* RType.Delimiter */, () => `unexpected missing else-part of if-then-else, received ${JSON.stringify([parsedIfThen, parsedElse])} for ${JSON.stringify(tokens)}`);
    return {
        ...parsedIfThen,
        otherwise: (0, normalize_meta_1.ensureExpressionList)(parsedElse)
    };
}
//# sourceMappingURL=normalize-if-then-else.js.map