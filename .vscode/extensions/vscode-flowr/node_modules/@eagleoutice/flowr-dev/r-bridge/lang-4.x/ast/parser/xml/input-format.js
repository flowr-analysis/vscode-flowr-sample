"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.XmlParseError = exports.nameKey = exports.contentKey = exports.childrenKey = exports.attributesKey = void 0;
exports.getKeyGuarded = getKeyGuarded;
exports.getKeysGuarded = getKeysGuarded;
exports.attributesKey = 'a';
exports.childrenKey = 'c';
exports.contentKey = '@';
exports.nameKey = '#';
/**
 * Thrown if the given input xml is not valid/contains unexpected elements.
 */
class XmlParseError extends Error {
    constructor(message) {
        super(message);
        this.name = 'XmlParseError';
    }
}
exports.XmlParseError = XmlParseError;
function error(key, obj) {
    throw new XmlParseError(`expected obj to have key ${key}, yet received ${JSON.stringify(obj)}`);
}
/**
 * Single-key variant of {@link getKeysGuarded}. Will throw an {@link XmlParseError} if the key is not present.
 */
function getKeyGuarded(obj, key) {
    return (obj[key] ?? error(key, obj));
}
/**
 * Retrieves the given keys from the converted xml. For a single key, see {@link getKeyGuarded}.
 * Will throw an {@link XmlParseError} if at least one of the keys is not present
 *
 * @typeParam T - the type of the values to retrieve. Note, that this type is not checked at runtime.
 */
function getKeysGuarded(obj, ...keys) {
    return Object.fromEntries(keys.map(k => [k, getKeyGuarded(obj, k)]));
}
//# sourceMappingURL=input-format.js.map