"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.controlflowStarCommand = exports.controlflowCommand = void 0;
const pipeline_executor_1 = require("../../../core/pipeline-executor");
const cfg_1 = require("../../../util/cfg/cfg");
const default_pipelines_1 = require("../../../core/steps/pipeline/default-pipelines");
const retriever_1 = require("../../../r-bridge/retriever");
const cfg_2 = require("../../../util/mermaid/cfg");
async function controlflow(shell, remainingLine) {
    return await new pipeline_executor_1.PipelineExecutor(default_pipelines_1.DEFAULT_NORMALIZE_PIPELINE, {
        shell,
        request: (0, retriever_1.requestFromInput)(remainingLine.trim())
    }).allRemainingSteps();
}
exports.controlflowCommand = {
    description: `Get mermaid code for the control-flow graph of R code, start with '${retriever_1.fileProtocol}' to indicate a file`,
    usageExample: ':controlflow',
    aliases: ['cfg', 'cf'],
    script: false,
    fn: async (output, shell, remainingLine) => {
        const result = await controlflow(shell, remainingLine);
        const cfg = (0, cfg_1.extractCFG)(result.normalize);
        output.stdout((0, cfg_2.cfgToMermaid)(cfg, result.normalize));
    }
};
exports.controlflowStarCommand = {
    description: 'Returns the URL to mermaid.live',
    usageExample: ':controlflow*',
    aliases: ['cfg*', 'cf*'],
    script: false,
    fn: async (output, shell, remainingLine) => {
        const result = await controlflow(shell, remainingLine);
        const cfg = (0, cfg_1.extractCFG)(result.normalize);
        output.stdout((0, cfg_2.cfgToMermaidUrl)(cfg, result.normalize));
    }
};
//# sourceMappingURL=repl-cfg.js.map