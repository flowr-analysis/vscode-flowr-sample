"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuiltInEnvironment = exports.Environment = void 0;
exports.makeReferenceMaybe = makeReferenceMaybe;
exports.makeAllMaybe = makeAllMaybe;
exports.initializeCleanEnvironments = initializeCleanEnvironments;
exports.builtInEnvJsonReplacer = builtInEnvJsonReplacer;
const built_in_1 = require("./built-in");
const resolve_by_name_1 = require("./resolve-by-name");
const json_1 = require("../../util/json");
function makeReferenceMaybe(ref, graph, environments, includeDefs, defaultCd = undefined) {
    const node = graph.get(ref.nodeId, true);
    if (includeDefs) {
        const definitions = ref.name ? (0, resolve_by_name_1.resolveByName)(ref.name, environments, ref.type) : undefined;
        for (const definition of definitions ?? []) {
            if (definition.type !== 128 /* ReferenceType.BuiltInFunction */ && definition.type !== 64 /* ReferenceType.BuiltInConstant */) {
                if (definition.controlDependencies && defaultCd && !definition.controlDependencies.find(c => c.id === defaultCd.id)) {
                    definition.controlDependencies.push(defaultCd);
                }
                else {
                    definition.controlDependencies = defaultCd ? [defaultCd] : [];
                }
            }
        }
    }
    if (node) {
        const [fst] = node;
        if (fst.controlDependencies && defaultCd && !fst.controlDependencies.includes(defaultCd)) {
            fst.controlDependencies.push(defaultCd);
        }
        else {
            fst.controlDependencies = defaultCd ? [defaultCd] : [];
        }
    }
    return { ...ref, controlDependencies: [...ref.controlDependencies ?? [], ...(defaultCd ? [defaultCd] : [])] };
}
function makeAllMaybe(references, graph, environments, includeDefs, defaultCd = undefined) {
    if (references === undefined) {
        return [];
    }
    return references.map(ref => makeReferenceMaybe(ref, graph, environments, includeDefs, defaultCd));
}
let environmentIdCounter = 0;
class Environment {
    id = environmentIdCounter++;
    parent;
    memory;
    constructor(parent) {
        this.parent = parent;
        this.memory = new Map();
    }
}
exports.Environment = Environment;
/* the built-in environment is the root of all environments */
exports.BuiltInEnvironment = new Environment(undefined);
exports.BuiltInEnvironment.memory = undefined;
const EmptyBuiltInEnvironment = {
    id: exports.BuiltInEnvironment.id,
    memory: undefined,
    parent: undefined
};
function initializeCleanEnvironments(fullBuiltIns = true) {
    exports.BuiltInEnvironment.memory ??= built_in_1.BuiltInMemory;
    EmptyBuiltInEnvironment.memory ??= built_in_1.EmptyBuiltInMemory;
    return {
        current: new Environment(fullBuiltIns ? exports.BuiltInEnvironment : EmptyBuiltInEnvironment),
        level: 0
    };
}
function builtInEnvJsonReplacer(k, v) {
    if (v === exports.BuiltInEnvironment) {
        return '<BuiltInEnvironment>';
    }
    else if (v === EmptyBuiltInEnvironment) {
        return '<EmptyBuiltInEnvironment>';
    }
    else {
        return (0, json_1.jsonReplacer)(k, v);
    }
}
//# sourceMappingURL=environment.js.map