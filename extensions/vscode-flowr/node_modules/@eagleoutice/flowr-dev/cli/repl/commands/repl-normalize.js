"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeStarCommand = exports.normalizeCommand = void 0;
const pipeline_executor_1 = require("../../../core/pipeline-executor");
const default_pipelines_1 = require("../../../core/steps/pipeline/default-pipelines");
const retriever_1 = require("../../../r-bridge/retriever");
const ast_1 = require("../../../util/mermaid/ast");
async function normalize(shell, remainingLine) {
    return await new pipeline_executor_1.PipelineExecutor(default_pipelines_1.DEFAULT_NORMALIZE_PIPELINE, {
        shell,
        request: (0, retriever_1.requestFromInput)(remainingLine.trim())
    }).allRemainingSteps();
}
exports.normalizeCommand = {
    description: `Get mermaid code for the normalized AST of R code, start with '${retriever_1.fileProtocol}' to indicate a file`,
    usageExample: ':normalize',
    aliases: ['n'],
    script: false,
    fn: async (output, shell, remainingLine) => {
        const result = await normalize(shell, remainingLine);
        output.stdout((0, ast_1.normalizedAstToMermaid)(result.normalize.ast));
    }
};
exports.normalizeStarCommand = {
    description: 'Returns the URL to mermaid.live',
    usageExample: ':normalize*',
    aliases: ['n*'],
    script: false,
    fn: async (output, shell, remainingLine) => {
        const result = await normalize(shell, remainingLine);
        output.stdout((0, ast_1.normalizedAstToMermaidUrl)(result.normalize.ast));
    }
};
//# sourceMappingURL=repl-normalize.js.map