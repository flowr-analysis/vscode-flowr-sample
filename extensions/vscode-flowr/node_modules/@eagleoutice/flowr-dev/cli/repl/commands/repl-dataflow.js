"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dataflowStarCommand = exports.dataflowCommand = void 0;
const pipeline_executor_1 = require("../../../core/pipeline-executor");
const default_pipelines_1 = require("../../../core/steps/pipeline/default-pipelines");
const retriever_1 = require("../../../r-bridge/retriever");
const dfg_1 = require("../../../util/mermaid/dfg");
async function dataflow(shell, remainingLine) {
    return await new pipeline_executor_1.PipelineExecutor(default_pipelines_1.DEFAULT_DATAFLOW_PIPELINE, {
        shell,
        request: (0, retriever_1.requestFromInput)(remainingLine.trim())
    }).allRemainingSteps();
}
exports.dataflowCommand = {
    description: `Get mermaid code for the dataflow graph of R code, start with '${retriever_1.fileProtocol}' to indicate a file`,
    usageExample: ':dataflow',
    aliases: ['d', 'df'],
    script: false,
    fn: async (output, shell, remainingLine) => {
        const result = await dataflow(shell, remainingLine);
        output.stdout((0, dfg_1.graphToMermaid)({ graph: result.dataflow.graph, includeEnvironments: false }).string);
    }
};
exports.dataflowStarCommand = {
    description: 'Returns the URL to mermaid.live',
    usageExample: ':dataflow*',
    aliases: ['d*', 'df*'],
    script: false,
    fn: async (output, shell, remainingLine) => {
        const result = await dataflow(shell, remainingLine);
        output.stdout((0, dfg_1.graphToMermaidUrl)(result.dataflow.graph, false));
    }
};
//# sourceMappingURL=repl-dataflow.js.map